{"name":"Injective","body":"# Injective framework\r\n\r\nThe purpose of this framework is to provide a simple dependency injection framework for iOS/Mac applications.\r\n\r\nInjective provides facilities for automatic connection of class instances by resolving properties dependencies. Additionally, Injective verifies that all required data is passed to instance for it to function correctly.\r\n\r\nInjective supports factory-like object creation and singleton object creation.\r\n\r\n## Setup\r\n\r\n### Git version\r\n\r\n#### (For git users only) Add Injective as a submodule\r\n\r\nIf you're using git as your project's scm, add Injective as a submodue:\r\n\r\n```bash\r\ngit submodule add https://github.com/farcaller/Injective\r\n```\r\n\r\n#### (For all others) Download Injective source\r\n\r\nDownload Injective source code from https://github.com/farcaller/Injective/zipball/master and unzip it to your project root directory.\r\n\r\n#### Add Injective project to your workspace\r\n\r\nAdd Injective project to Project navigator (this will create a workspace if you don't have one). To do this, drag *Injective.xcodeproj* from the Finder to the very bottom of your project navigator panel:\r\n\r\n![Adding Injective to workspace](http://farcaller.github.com/Injective/add-to-workspace.png)\r\n\r\nIf you don't have a workspace yet, you will be asked: \"Do you want to save this project in a new workspace?\". Save it.\r\n\r\n#### Add public headers to search path\r\n\r\nOpen your project's build settings and add *Injective/Headers* to **Header Search paths**. If you followed step 0, it's as simple as adding `$(PROJECT_DIR)/Injective/Injective/Headers`:\r\n\r\n![Adding header search paths](http://farcaller.github.com/Injective/add-header-search-path.png)\r\n\r\n#### (optional) Add Injective as a global header\r\n\r\nAdd the following line to your project's precompiled header (pch file): `#import \"InjectiveContext.h\"`:\r\n\r\n![Updating precompiled header](http://farcaller.github.com/Injective/add-to-pch.png)\r\n\r\nThis will allow you to use Injective without requiring you to #import it everywhere.\r\n\r\n### Precompiled version\r\n\r\nThere is a target to build Injective.framework, however at the current point there is no stable release. Precompiled builds would be added later, for now it's suggested that you use a recent git checkout.\r\n\r\n## Usage\r\n\r\n### Configuring a default context\r\n\r\nAll the helpers require a global context to be set up. You can specify one with:\r\n\r\n```objc\r\nIJContext *defaultContext = [[IJContext alloc] init];\r\n[IJContext setDefaultContext:defaultContext];\r\n```\r\n\r\nWhere to do that? As soon as you can. You can use `-application:didFinishLaunchingWithOptions:` of the application delegate in the iOS projects.\r\n\r\n### Registering a singleton class\r\n\r\nTo register a class you need to use `+registerClass:instantinationMode:` method of *InjectiveContext* class:\r\n\r\n```objc\r\nIJContext *myContext = [[IJContext alloc] init];\r\n[myContext registerClass:[MyAPIController class]\r\n      instantinationMode:IJContextInstantinationModeSingleton];\r\n```\r\n\r\nThen, you can get an instance of the class with the following code:\r\n\r\n```objc\r\nMyAPIController *api = [myContext instantinateClass:[MyAPIController class]\r\n                                     withProperties:nil];\r\n```\r\n\r\n*Note:* You can also use the `injective_register_singleton` macro in your class implementation:\r\n\r\n```objc\r\n@implementation MyAPIController\r\n\r\ninjective_register_singleton(MyAPIController)\r\n\r\n...\r\n\r\n@end\r\n```\r\n\r\n### Registering a common class\r\n\r\nYou can register a common class using **InjectiveContextInstantinationModeFactory**. This way, Injective will create a new instance of the class each time you instantiate it:\r\n\r\n```objc\r\nIJContext *myContext = [[IJContext alloc] init];\r\n[myContext\r\n registerClass:[MyDetailViewController class]\r\n instantinationMode:IJContextInstantinationModeFactory];\r\n```\r\n\r\nIn this mode, you can pass additional properties that would be mapped by KVC:\r\n\r\n```objectivec\r\nNSDictionary *d = [NSDictionary dictionaryWithObjectsAndKeys:\r\n                   items, @\"items\",\r\n                   nil];\r\nMyDetailViewController *viewController = [myContext\r\n                                          instantinateClass:[MyDetailViewController class] \r\n                                          withProperties:d];\r\n```\r\n\r\n*Note:* You can also use the `injective_register` macro in your class implementation:\r\n\r\n```objc\r\n@implementation MyDetailViewController\r\n\r\ninjective_register(MyDetailViewController)\r\n\r\n...\r\n\r\n@end\r\n```\r\n\r\n### Specifying dependencies\r\n\r\nTo make Injective actually useful, you need to specify a set of properties, that your class requires. You can do this via `+injective_requredProperties` method:\r\n\r\n```objc\r\n@interface MyDetailViewController : UIViewController\r\n\r\n@property (nonatomic, strong) MyAPIController *apiController;\r\n\r\n@end\r\n\r\n\r\n@implementation MyDetailViewController\r\n\r\ninjective_register(MyDetailViewController)\r\n\r\n+ (NSSet *)injective_requredProperties\r\n{\r\n    return [NSSet setWithObject:@\"apiController\"];\r\n}\r\n\r\n@end\r\n```\r\n\r\nThere's another handy macro for you -- `injective_requires`, that does the same job:\r\n\r\n```objc\r\n@implementation MyDetailViewController\r\n\r\ninjective_register(MyDetailViewController)\r\ninjective_requires(@\"apiController\")\r\n\r\n@end\r\n```\r\n\r\n### Instantiation helpers\r\n\r\nYou can instantiate any object in default context using the following class method of NSObject's category:\r\n\r\n```objc\r\nMyDetailViewController *viewController = [MyDetailViewController injectiveInstantiate];\r\n```\r\n\r\n## Licensing\r\n\r\nInjective is a MIT-licensed framework. See details in *LICENSE* file.\r\n\r\n## Credits\r\n\r\n[![Flattr this git repo](http://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=farcaller&url=https://github.com/farcaller/Injective&title=Injective&language=&tags=github&category=software)\r\n\r\n\r\nInjective framework is originally written by Vladimir \"Farcaller\" Pouzanov <<farcaller@gmail.com>>.\r\n\r\nA few ideas are based on Objection framework (https://github.com/atomicobject/objection).\r\n\r\n## Bugs / Suggestions\r\n\r\nI'm always open to communication. Please file a ticket via github issues system at https://github.com/farcaller/Injective/issues/new.\r\n","google":"","tagline":"Cocoa / Cocoa Touch Dependency Injection framework with features for simpler TDD","note":"Don't delete this file! It's used internally to help with page regeneration."}